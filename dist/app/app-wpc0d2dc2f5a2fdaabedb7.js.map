{"version":3,"file":"app/app-wpc0d2dc2f5a2fdaabedb7.js","mappings":"mBA6GA,QA7GA,MACIA,WAAAA,CAAYC,GACRC,KAAKD,GAAKA,EACVC,KAAKC,WAAaD,KAAKD,EAE1B,CACDG,IAAAA,GACIF,KAAKG,WACLH,KAAKI,iBACLJ,KAAKK,QAET,CACAF,QAAAA,GACIH,KAAKM,iBAAmBC,SAASC,eAAeR,KAAKD,IAErDC,KAAKS,YAAcT,KAAKM,iBAAiBI,cAAc,iBACvDV,KAAKW,SAAWX,KAAKM,iBAAiBI,cAAc,aAExD,CACAN,cAAAA,GAAmB,CACnBC,MAAAA,GACIL,KAAKS,YAAYG,QAAWC,IACxB,IAAIC,EAASD,EAAEC,OAIf,GAHAA,EAASA,EAAOC,QAAQ,gBACLD,EAAOE,UAAUC,SAAS,aACrB,OAAXH,EAET,OAMH,MAAM,GAACf,EAAE,KAAEmB,GAAQJ,EAAOK,QAG3BnB,KAAKoB,iBAAiBN,EAAQ,CAAEf,KAAIsB,KADvB,YAC6BH,QAAO,EAKrDlB,KAAKW,SAASC,QAAWC,IACrB,MAAMC,EAASD,EAAEC,OAGjB,GAFAQ,QAAQC,IAAIT,EAAQ,WAEfA,EAAOE,UAAUC,SAAS,iBAC3B,OAEJ,MAAOlB,EAAKe,EAAOC,QAAQ,gBAAgBI,QAAQpB,GAEnDC,KAAKoB,iBAAiBN,EAAQ,CAACf,KAAIsB,KADtB,UAC4B,CAKhD,CAGDD,gBAAAA,CAAiBN,GAAQ,GAACf,EAAE,KAAEsB,EAAI,KAAEH,IAEhC,GAAa,cAATG,EAAsB,CAEtB,MAAMG,EAAaxB,KAAKyB,iBAAiB1B,EAAImB,GACzCM,IACAxB,KAAKW,SAASe,YAAYF,GAE1BV,EAAOE,UAAUW,IAAI,YAE7B,CAEA,GAAa,WAATN,EAAmB,CACAP,EAAOC,QAAQ,gBACvBa,SAEW5B,KAAKS,YAAYC,cAAe,aAAYX,OACpDiB,UAAUY,OAAO,WAEnC,CAEJ,CAOAH,gBAAAA,CAAiB1B,EAAImB,GAIjB,GAAIlB,KAAKW,SAASD,cAAe,aAAYX,OAEzC,OADA8B,MAAM,uBACC,KAEX,IAAIC,EAAKvB,SAASwB,cAAc,MAUhC,OATAD,EAAGd,UAAUW,IAAI,eACjBG,EAAGX,QAAQpB,GAAKA,EAChB+B,EAAGX,QAAQD,KAAOA,EAClBY,EAAGE,UAAa,4CACiBhC,KAAKC,wBAAwBF,0BAClDmB,qEAILY,CACX,GCzGG,MAAMG,EACTnC,WAAAA,GACIE,KAAKkC,iBAAmB3B,SAASG,cAAc,uBAC/CV,KAAKmC,WAAa5B,SAASG,cAAc,yBACzCV,KAAKoC,aAAe7B,SAASG,cAAc,kBAC3CV,KAAKqC,WAAarC,KAAKmC,WACvBnC,KAAKsC,cAAgB,KACrBtC,KAAKuC,qBAAuBhC,SAASG,cAAc,yBACnDV,KAAKwC,0BAA4B,IAAIA,EACrCxC,KAAKK,SACLL,KAAKE,MACT,CAEAA,IAAAA,GAEIF,KAAKkC,iBAAiBO,cAAgB,EAGtCzC,KAAKwC,0BAA0BE,OAAO1C,KAAKmC,WAC/C,CAEA9B,MAAAA,GACIL,KAAKkC,iBAAiBS,SAAY9B,IAC9B,IACI+B,EADS/B,EAAEC,OACI8B,MAAMC,OAEzB,GAAID,IAAU5C,KAAKsC,cACf,OAGJ,MAAMQ,EAAqCF,GAChCA,EACFG,MAAM,OACNC,KAAKC,GAASA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,KACxDC,KAAK,KAGd,GAAc,QAAVT,GAA6B,KAAVA,EAAc,CAEjC,GAAI5C,KAAKqC,aAAerC,KAAKmC,WACzB,OAEJnC,KAAKqC,WAAWrB,UAAUY,OAAO,UACjC5B,KAAKmC,WAAWnB,UAAUW,IAAI,UAC9B3B,KAAKqC,WAAarC,KAAKmC,WACvBnC,KAAKsC,cAAgBM,EAGrB5C,KAAKuC,qBAAqBe,YAActD,KAAKuD,aAEjD,MACIvD,KAAKqC,WAAWrB,UAAUY,OAAO,UAGjC5B,KAAKqC,WAAa9B,SAASG,cAAe,+BAA8BkC,OACxE5C,KAAKmC,WAAWnB,UAAUY,OAAO,UACjC5B,KAAKqC,WAAWrB,UAAUW,IAAI,UAC9B3B,KAAKsC,cAAgBM,EAErBtB,QAAQC,IAAIuB,EAAkCF,GAAQ,SACtD5C,KAAKuC,qBAAqBe,YAAcR,EAAkCF,GAI9E5C,KAAKwC,0BAA0BgB,YAAYxD,KAAKqC,WAAW,CAEnE,EAGJ,MAAMG,EACF1C,WAAAA,GACIE,KAAKM,iBAAmB,KACxBN,KAAKyD,WAAalD,SAASG,cAAc,iBACzCV,KAAK0D,cAAgB1D,KAAK2D,SAAS3D,KAAK0D,cAAcE,KAAK5D,MAAO,IACtE,CAEA0C,MAAAA,CAAOpC,GACHN,KAAKM,iBAAmBA,EAGpBN,KAAKyD,YACLzD,KAAKyD,WAAWI,iBAAiB,QAAS7D,KAAK0D,cAEvD,CAEAA,aAAAA,CAAc7C,GACV,MAAM+B,EAAQ/B,EAAEC,OAAO8B,MACvBtB,QAAQC,IAAIqB,EAAO,SACnB,IAAIkB,EAAQ9D,KAAKM,iBAAiByD,iBAAiB,gBAC/CC,EAAchE,KAAKM,iBAAiByD,iBAAiB,gBAGzDD,EAAQ,IAAIA,KAAUE,GACtBF,EAAMG,SAAQC,IACGA,EAAK/C,QAAQD,KACjBiD,cAAcC,QAAQxB,EAAMuB,gBAAkB,EACnDD,EAAKG,MAAMC,QAAU,OAErBJ,EAAKG,MAAMC,QAAU,MACzB,GAER,CAEAd,WAAAA,CAAYlD,GACRN,KAAKyD,WAAWb,MAAQ,GACxB,IAAIkB,EAAQ9D,KAAKM,iBAAiByD,iBAAiB,gBAC/CC,EAAchE,KAAKM,iBAAiByD,iBAAiB,gBAGzDD,EAAQ,IAAIA,KAAUE,GACtBF,EAAMG,SAAQC,IACVA,EAAKG,MAAMC,QAAU,MAAM,IAI3BtE,KAAKyD,YACLzD,KAAKyD,WAAWc,oBAAoB,QAASvE,KAAK0D,eAGtD1D,KAAK0C,OAAOpC,EAChB,CAEAqD,QAAAA,CAASa,EAAMC,GACX,IAAIC,EACJ,OAAO,YAAYC,GACfC,aAAaF,GACbA,EAAUG,YAAW,IAAML,EAAKM,MAAM9E,KAAM2E,IAAOF,EACvD,CACJ,EC3HJlE,SAASsD,iBAAiB,oBAAoB,KAC1C,IAAIkB,EAAUC,OAAOC,KAAKC,SAASC,QAAOC,GAAOA,EAAIvC,SAAQG,KAAKoC,GAAQA,EAAM,SACtD,IAAInD,EAC9B,IAAK,MAAMlC,KAAMgF,EAAS,CACK,IAAIM,EAA6BtF,GACzCG,MAEvB,I","sources":["webpack://_new/./includes/meta-field-section.js","webpack://_new/./includes/PreferenceFilters.js","webpack://_new/./src/app/js/app.js"],"sourcesContent":["class GP_Moxcar_MetaFieldSelection {\n    constructor(id) {\n        this.id = id;\n        this.input_name = this.id;\n       \n     }\n    init() {\n        this.cacheDom();\n        this.initializeVars();\n        this.events();\n   \n    }\n    cacheDom() { \n        this.selectionElement = document.getElementById(this.id);\n        // choice elements without disabled class\n        this.selectionUL = this.selectionElement.querySelector('.selection ul');\n        this.chosenUL = this.selectionElement.querySelector('.chosen ul');\n    \n    }\n    initializeVars() { }\n    events() {\n        this.selectionUL.onclick = (e) => {\n            let target = e.target; // the element that was clicked\n            target = target.closest('.choice-item'); // the closest parent element that has the class choice-item\n            let has_disabled = target.classList.contains('disabled'); // check if the element has the class disabled\n            let isNull = target === null; // check if the element is null\n            if (has_disabled || isNull)  { // if the element has the class disabled or is null, return\n                return;\n            }\n \n           \n            \n            \n             const {id, name} = target.dataset;\n            \n            const type = 'selection';\n            this.selectionHandler(target, { id, type, name });\n           \n\n        }\n\n        this.chosenUL.onclick = (e) => {\n            const target = e.target;\n            console.log(target, 'target');\n\n            if (!target.classList.contains('cancel-button')) {\n                return;\n            }\n            const  id = target.closest('.chosen-item').dataset.id;\n            const type = 'chosen';\n            this.selectionHandler(target, {id, type});\n        }\n\n       \n       \n     }\n   \n\n    selectionHandler(target, {id, type, name}) {\n        // if type is selection, add to chosen\n        if (type === 'selection') {\n             \n            const chosenItem = this.createChosenItem(id, name);\n            if (chosenItem) {\n                this.chosenUL.appendChild(chosenItem);\n                // add disable class to item on selection list\n                target.classList.add('disabled');\n            }\n        }\n\n        if (type === 'chosen') {\n            const chosenItem = target.closest('.chosen-item');\n            chosenItem.remove();\n            // remove disable class from item on selection list\n            const selectionItem = this.selectionUL.querySelector(`[data-id=\"${id}\"]`);\n            selectionItem.classList.remove('disabled');\n\n        }\n        // if type is chosen, add to selection\n    }\n\n    // main methods\n\n\n    // helper methods\n\n    createChosenItem(id, name) {\n        // check if the item already exists in the chosen list\n        // if it does, return null\n\n        if (this.chosenUL.querySelector(`[data-id=\"${id}\"]`)) {\n            alert('Item already exists');\n            return null;\n        }\n        let li = document.createElement('li');\n        li.classList.add('chosen-item');\n        li.dataset.id = id;\n        li.dataset.name = name;\n        li.innerHTML = `\n            <input type=\"hidden\" name=\"${this.input_name}[]\" value=\"${id}\">\n            <span>${name}</span>\n            <div class=\"cancel-button\">-</div>\n        `;\n        \n        return li;\n    }\n\n}\n\nexport default GP_Moxcar_MetaFieldSelection;","export class PreferenceFilters {\n    constructor() {\n        this.preferenceFilter = document.querySelector('#preferences-filter');\n        this.defaultRow = document.querySelector('.selection-row.active');\n        this.selectionRow = document.querySelector('.selection-row'); // Fixed typo\n        this.currentRow = this.defaultRow;\n        this.currentTarget = null;\n        this.meta_selection_title = document.querySelector('#meta-selection-title');\n        this.searchMetaSelectionFilter = new searchMetaSelectionFilter();\n        this.events();\n        this.init();\n    }\n\n    init() {\n        // Select first option in the preference filter:\n        this.preferenceFilter.selectedIndex = 1;\n\n        // Set search for meta selection filter first element to match the first row \n        this.searchMetaSelectionFilter.search(this.defaultRow);\n    }\n\n    events() {\n        this.preferenceFilter.onchange = (e) => {\n            let target = e.target;\n            let value = target.value.trim();\n\n            if (value === this.currentTarget) {\n                return;\n            }\n\n            const convertValueToUpperCaseByEachWord = (value) => {\n                return value\n                    .split(/_|-/)\n                    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n                    .join(\" \");\n            };\n\n            if (value === 'all' || value === \"\") {\n                // Check if the current row is the default row\n                if (this.currentRow === this.defaultRow) {\n                    return;\n                }\n                this.currentRow.classList.remove('active');\n                this.defaultRow.classList.add('active');\n                this.currentRow = this.defaultRow;\n                this.currentTarget = value;\n\n                // Set the meta section title to the default value\n                this.meta_selection_title.textContent = this.default_title;\n\n            } else {\n                this.currentRow.classList.remove('active');\n\n                // Get the current row via filter value\n                this.currentRow = document.querySelector(`.selection-row[data-filter=\"${value}\"]`);\n                this.defaultRow.classList.remove('active');\n                this.currentRow.classList.add('active');\n                this.currentTarget = value;\n\n                console.log(convertValueToUpperCaseByEachWord(value), 'value');\n                this.meta_selection_title.textContent = convertValueToUpperCaseByEachWord(value);\n            }\n\n            // Reset search for meta selection filter\n            this.searchMetaSelectionFilter.resetSearch(this.currentRow);\n        };\n    }\n}\n\nclass searchMetaSelectionFilter {\n    constructor() {\n        this.selectionElement = null;\n        this.searchItem = document.querySelector('#posts-search');\n        this.searchHandler = this.debounce(this.searchHandler.bind(this), 300); // Added debouncing\n    }\n\n    search(selectionElement) {\n        this.selectionElement = selectionElement;\n      \n        \n        if (this.searchItem) { // Check if the search item exists\n            this.searchItem.addEventListener('keyup', this.searchHandler);\n        }\n    }\n\n    searchHandler(e) {\n        const value = e.target.value;\n        console.log(value, 'value');\n        let items = this.selectionElement.querySelectorAll('.choice-item');\n        let chosenItems = this.selectionElement.querySelectorAll('.chosen-item');\n\n        // Combine both items\n        items = [...items, ...chosenItems];\n        items.forEach(item => {\n            const name = item.dataset.name;\n            if (name.toLowerCase().indexOf(value.toLowerCase()) > -1) {\n                item.style.display = 'flex';\n            } else {\n                item.style.display = 'none';\n            }\n        });\n    }\n\n    resetSearch(selectionElement) {\n        this.searchItem.value = '';\n        let items = this.selectionElement.querySelectorAll('.choice-item');\n        let chosenItems = this.selectionElement.querySelectorAll('.chosen-item');\n\n        // Combine both items\n        items = [...items, ...chosenItems];\n        items.forEach(item => {\n            item.style.display = 'flex';\n        });\n\n        // Remove event listener from this.searchItem\n        if (this.searchItem) { // Check if the search item exists\n            this.searchItem.removeEventListener('keyup', this.searchHandler);\n        }\n\n        this.search(selectionElement);\n    }\n\n    debounce(func, delay) {\n        let timeout;\n        return function(...args) {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(this, args), delay);\n        };\n    }\n}\n","import GP_Moxcar_MetaFieldSelection from '../../../includes/meta-field-section';\nimport '../scss/app.scss'; // Importing SCSS file\nimport { PreferenceFilters } from '../../../includes/PreferenceFilters';\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    let row_ids = Object.keys(options).filter(key => key.trim()).map((key) => key + '-row');\n    const preferenceFilters = new PreferenceFilters();\n    for (const id of row_ids) {\n        const metaFieldSelection = new GP_Moxcar_MetaFieldSelection(id);\n        metaFieldSelection.init();\n        \n    }\n\n\n}   );\n"],"names":["constructor","id","this","input_name","init","cacheDom","initializeVars","events","selectionElement","document","getElementById","selectionUL","querySelector","chosenUL","onclick","e","target","closest","classList","contains","name","dataset","selectionHandler","type","console","log","chosenItem","createChosenItem","appendChild","add","remove","alert","li","createElement","innerHTML","PreferenceFilters","preferenceFilter","defaultRow","selectionRow","currentRow","currentTarget","meta_selection_title","searchMetaSelectionFilter","selectedIndex","search","onchange","value","trim","convertValueToUpperCaseByEachWord","split","map","word","charAt","toUpperCase","slice","join","textContent","default_title","resetSearch","searchItem","searchHandler","debounce","bind","addEventListener","items","querySelectorAll","chosenItems","forEach","item","toLowerCase","indexOf","style","display","removeEventListener","func","delay","timeout","args","clearTimeout","setTimeout","apply","row_ids","Object","keys","options","filter","key","GP_Moxcar_MetaFieldSelection"],"sourceRoot":""}